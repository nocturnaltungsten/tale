[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "tale"
version = "0.1.0"
description = "Skynet-Lite: Lean Autonomous Agent Architecture"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # MCP and async - PINNED (critical for stability)
    "mcp>=1.10.0",
    "aiohttp>=3.8.6",

    # Model management
    "ollama>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.3.0",

    # Data and storage - PINNED (critical for stability)
    "pydantic==2.11.0",
    "sqlalchemy==2.0.25",
    "aiosqlite>=0.19.0",

    # CLI and TUI - PINNED (critical for stability)
    "click==8.1.7",
    "rich>=13.0.0",
    "textual>=0.40.0",

    # Git integration
    "gitpython>=3.1.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=4.2.0",
    "coverage>=7.0.0",
    "types-requests>=2.31.0",
    "types-psutil>=6.0.0",
    "bandit[toml]>=1.7.0",
    "pip-audit>=2.9.0",
]

[project.scripts]
tale = "src.cli.main:main"


[tool.black]
line-length = 88
target-version = ['py310']

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = ["E501", "N818"]  # Line too long (handled by black), Exception naming (TaleBaseException required)

[tool.ruff.lint.isort]
known-first-party = ["cli", "mcp", "models", "orchestration", "servers", "storage"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config --cov=src --cov-report=html --cov-report=term-missing --cov-fail-under=85"
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "e2e: End-to-end tests for complete workflows",
    "slow: Tests that take longer than 1 second",
    "network: Tests that require network access",
    "database: Tests that require database access",
    "performance: Performance benchmarking tests",
    "long_running: Tests that take longer than 30 seconds",
]

[tool.bandit]
exclude_dirs = ["tests", ".venv"]
skips = ["B101"]  # Skip assert_used test
